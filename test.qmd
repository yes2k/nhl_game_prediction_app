---
title: "eda"
format: html
---


```{python}
import cmdstanpy
import polars as pl
import sqlite3
import requests
from datetime import date, datetime, timedelta 
import numpy as np
from src.model import get_model_data, get_prediction
import seaborn as sns
# import src.bt_model as bt_model

```


# Bradley Terry Model

## Getting log loss for a season
```{python}

con = sqlite3.connect("data/data.db") 
query = f"""
    SELECT date, CAST(id as text) game_id, away_team, 
            home_team, home_goals, away_goals
    FROM goal_data
    WHERE substr(game_id, 1, 4) == "2023"
    ORDER BY game_id
"""
out = (
    pl.read_database(query=query, connection=con)
)

model = cmdstanpy.CmdStanModel(stan_file = "src/model/bt_model.stan")

pred_df = []
for d in out["date"].unique().sort().to_list()[1:]:
    res = bt_model.get_model_data('./data/data.db', '2023', d)
    res_minus_1 = res["model_df"].filter(pl.col("date") < d)
    to_pred_df = res["model_df"].filter(pl.col("date") == d)

    datalist = {
        "n_games": res_minus_1.shape[0],
        "n_teams": res["team_id_map"].shape[0],
        "winner_id": res_minus_1["winning_id"].to_list(),
        "loser_id": res_minus_1["losing_id"].to_list(),
        "pred_t1_id": to_pred_df["winning_id"].to_list(),
        "pred_t2_id": to_pred_df["losing_id"].to_list(),
        "n_pred": to_pred_df.shape[0]
    }
    model_fit = model.sample(datalist, parallel_chains=4)
    pred_df.append((
        to_pred_df.with_columns(
            prob_win_winning_team = np.mean(model_fit.stan_variable("t1_pred"), axis=0)
        )
    ))


```







# Hierarchical Poisson Model
## Getting log loss for a season

```{python}
con = sqlite3.connect("data/data.db") 
query = f"""
    SELECT date, CAST(id as text) game_id, away_team, 
            home_team, home_goals, away_goals, winning_team
    FROM goal_data
    WHERE substr(game_id, 1, 4) == "2023"
    ORDER BY game_id
"""
query_df = (
    pl.read_database(query=query, connection=con)
)

model = cmdstanpy.CmdStanModel(stan_file = "src/model/model.stan")

pred_df = []
for d in query_df["date"].unique().sort().to_list()[2:]:
    print(d)
    res = get_model_data("data/data.db", "2023", d)
    res_minus_1 = res["model_df"].filter(pl.col("date") < d)
    to_pred_df = res["model_df"].filter(pl.col("date") == d)

    datalist = {
        "N": res_minus_1.shape[0],
        "n_teams": res["team_id_map"].shape[0],
        "home_teams": res_minus_1["home_id"].to_list(),
        "away_teams": res_minus_1["away_id"].to_list(),
        "home_goals": res_minus_1["home_goals"].to_list(),
        "away_goals": res_minus_1["away_goals"].to_list(),
        "home_new": to_pred_df["home_id"].to_list(),
        "away_new": to_pred_df["away_id"].to_list(),
        "N_new": to_pred_df.shape[0]
    }

    model_fit = model.sample(datalist, parallel_chains=4, show_console=False, refresh=None)

    home_team_pred_goals = pl.DataFrame(model_fit.stan_variable("pred_home_goals"))
    away_team_pred_goals = pl.DataFrame(model_fit.stan_variable("pred_away_goals"))
    home_ot_win_prob = pl.DataFrame(model_fit.stan_variable("home_ot_win_prob"))

    prob_home_team_win = []
    for i in range(home_ot_win_prob.shape[1]):
        out = (
            pl.concat([
                home_team_pred_goals.select(f"column_{i}").rename({f"column_{i}": "pred_home_goals"}),
                away_team_pred_goals.select(f"column_{i}").rename({f"column_{i}": "pred_away_goals"}),
                home_ot_win_prob.select(f"column_{i}").rename({f"column_{i}": "home_to_win_prob"})
            ], how="horizontal")
            .with_columns(
                pl.when(pl.col("pred_home_goals") > pl.col("pred_away_goals")).then(1)
                .when(pl.col("pred_home_goals") < pl.col("pred_away_goals")).then(0)
                .when(pl.col("pred_home_goals") == pl.col("pred_away_goals"))
                .then((pl.col("home_to_win_prob") > 0.5).cast(pl.Int32)).alias("home_team_win")
            )
        )
        prob_home_team_win.append(out["home_team_win"].mean())

    to_pred_df = to_pred_df.with_columns(pl.Series(prob_home_team_win).alias("prob_home_team_win"))
    pred_df.append((
        to_pred_df
        .with_columns(pl.Series(prob_home_team_win).alias("prob_home_team_win"))
        .select(["date", "game_id", "home_team", "away_team", "prob_home_team_win"])
    ))

pred_df = pl.concat(pred_df, how = "vertical_relaxed")
```



```{python}


test = (
    pred_df
    .join(
        query_df.select("date", "game_id", "winning_team"),
        how = "left",
        left_on = ["date", "game_id"],
        right_on = ["date", "game_id"]
    )
    .with_columns(
        pl.when(pl.col("winning_team") == pl.col("home_team"))
        .then(pl.col("prob_home_team_win").log())
        .otherwise((pl.lit(1) - pl.col("prob_home_team_win")).log()).alias("log_loss"),
        pl.when(pl.col("prob_home_team_win") > 0.5).then("home_team").otherwise("away_team").alias("pred_win_team")
    )
)

(-1 * test["log_loss"]).mean()

# accuracy
(test["pred_win_team"] == test["winning_team"]).mean()

```


```{python}
sns.lineplot(
    (
        test.with_row_index().
        with_columns(
            (pl.col("log_loss").cum_sum() / pl.col("log_loss").cum_count()).alias("cumulative_mean")
        )
        .filter(pl.col("index") > 10)
    ), 
    x = 'index', y = 'cumulative_mean')
```

## Simulate the rest of the season

